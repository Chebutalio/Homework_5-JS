{"version":3,"sources":["components/Home.js","components/Square.js","components/Board.js","components/Status.js","components/DifficultyLevel.js","components/Game.js","components/App.js","index.js"],"names":["Home","className","to","classMapping","null","symbolMapping","getClass","value","getSymbol","Square","props","onClick","onContextMenu","onRightClick","renderRow","row","items","map","key","column","event","renderSquare","Board","gameFinished","style","gridTemplateColumns","width","game","Status","minesLeft","buttonStatus","time","DifficultyLevel","isSelected","label","role","aria-label","emoji","Game","state","getInitialState","minimum","maximum","Math","floor","random","squares","height","Array","from","length","pattern","navigator","vibrate","solution","symbol","rowKey","square","squareKey","isMine","maximumMines","flat","filter","sq","number","abs","toString","padStart","this","setState","stopTimer","generateArray","gameStarted","start","bestTimes","JSON","parse","localStorage","getItem","startTimer","slice","generateGame","checkStart","reveal","updateGameStatus","preventDefault","inRange","expand","setGameOver","thereAreRemainingMoves","getSolution","updateBestTime","currentRow","currentColumn","generatedMines","randomInRange","incrementMinesNearby","Date","now","timer","setInterval","clearInterval","newTime","Object","assign","bestTime","getBestTimeKey","setItem","stringify","leftPad","restart","isGame","handleClick","handleRightClick","getBestTimeText","Component","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e7ed20c.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Home.css';\n\nconst Home = () => {\n    return (\n        <div className=\"home\">\n            <h1 className=\"home_header\">Сапьор</h1>\n            <Link to=\"/game\" className=\"home_go\">Го Грати!</Link>\n        </div>\n    )\n}\n\n\nexport default Home;\n","import React from 'react';\nimport './Square.css';\n\nconst classMapping = {\n    'C': 'emoji mine clicked',\n    'M': 'emoji mine',\n    'F': 'emoji flag',\n    'W': 'emoji wrong',\n    null: 'unrevealed',\n};\n\nconst symbolMapping = {\n    'C': '💣',\n    'M': '💣',\n    'F': '🚩',\n    'W': '❌',\n};\n\nconst getClass = value => classMapping[value] || 'revealed number' + value;\nconst getSymbol = value => symbolMapping[value] || (value ? value : null);\n\nexport default function Square(props) {\n    return (\n        <button\n            className={`Square ${getClass(props.value)}`}\n            onClick={props.onClick}\n            onContextMenu={props.onRightClick}\n        >\n            {getSymbol(props.value)}\n        </button>\n    );\n};\n","import React from 'react';\nimport Square from './Square';\nimport './Board.css';\n\nconst renderSquare = (props, row, column, value) => {\n    return (\n        <Square\n            key={row + \"_\" + column}\n            value={value}\n            onClick={() => props.onClick(row, column)}\n            onRightClick={(event) => props.onRightClick(event, row, column)}\n        />\n    );\n};\n\nconst renderRow = (props, row, items) =>\n    items.map((value, key) => renderSquare(props, row, key, value));\n\nexport default function Board(props) {\n    return (\n        <div\n            className={'Board' + (props.gameFinished ? ' disabled' : '')}\n            style={{ gridTemplateColumns: `repeat(${props.width}, 1fr)` }}\n        >\n            {props.game.map((value, key) => renderRow(props, key, value))}\n        </div>\n    );\n};\n","import React from 'react';\nimport './Status.css';\n\nexport default function Status(props) {\n    return (\n        <div className=\"status\">\n            <div className=\"lcd minesLeft\">{props.minesLeft}</div>\n            <button className=\"restart\" onClick={props.onClick}>\n                {props.buttonStatus}\n            </button>\n            <div className=\"lcd timer\">{props.time}</div>\n        </div>\n    );\n};\n","import React from 'react';\nimport './DifficultyLevel.css';\n\nexport default function DifficultyLevel(props) {\n    return (\n        <button\n            className={'difficulty-level ' + (props.isSelected ? 'selected' : '')}\n            onClick={props.onClick}\n        >\n            {props.label}{' '}\n            <span role=\"img\" aria-label={props.label}>{props.emoji}</span>\n        </button>\n    );\n};","import React, { Component } from 'react';\nimport './Game.css';\nimport Board from './Board';\nimport Status from './Status';\nimport DifficultyLevel from './DifficultyLevel';\n\nconst EMOJI_OK = '😊';\nconst EMOJI_GAME_OVER = '😭';\nconst EMOJI_WIN = '😎';\n\nclass Game extends Component {\n  static randomInRange(minimum, maximum) {\n    return Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\n  }\n\n  static isMine(squares, row, column) {\n    return squares[row][column] === 'M';\n  }\n\n  static generateArray(height, width, value) {\n    return Array.from(\n      { length: height },\n      () => Array.from({ length: width }, () => value)\n    )\n  }\n\n  static vibrate(pattern) {\n    return navigator.vibrate(pattern);\n  }\n\n  static getSolution(game, solution, symbol) {\n    return game.map(\n      (row, rowKey) => row.map(\n        (square, squareKey) =>\n          Game.isMine(solution, rowKey, squareKey) ? symbol : solution[rowKey][squareKey]\n      )\n    );\n  }\n\n  static thereAreRemainingMoves(squares, maximumMines) {\n    return squares.flat().filter(\n      sq => (sq === null || sq === 'F')\n    ).length > maximumMines;\n  }\n\n  static leftPad(number) {\n    if (number < 0) {\n      return '-' + Math.abs(number).toString().padStart(2, '0');\n    }\n\n    return number.toString().padStart(3, '0');\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = this.getInitialState();\n  }\n\n  restart(...args) {\n    this.setState(this.getInitialState(...args));\n  }\n\n  getInitialState(height = 9, width = 9, maximumMines = 10) {\n    this.stopTimer();\n\n    return {\n      height: height,\n      width: width,\n      maximumMines: maximumMines,\n      minesLeft: maximumMines,\n      game: Game.generateArray(height, width, null),\n      solution: null,\n      gameStarted: false,\n      gameFinished: false,\n      buttonStatus: EMOJI_OK,\n      time: 0,\n      start: 0,\n      bestTimes: JSON.parse(localStorage.getItem('minesweeper:bestTimes')) || {},\n    };\n  }\n\n  checkStart() {\n    if (!this.state.gameStarted) {\n      this.startTimer();\n    }\n  }\n\n  handleClick(row, column) {\n    let game = this.state.game.slice();\n    let solution;\n\n    if (!this.state.solution) {\n      solution = this.generateGame(this.state.height, this.state.width, row, column, this.state.maximumMines);\n      this.setState({ gameStarted: true, solution: solution });\n    } else {\n      solution = this.state.solution.slice();\n    }\n    this.checkStart();\n\n    if (this.state.gameFinished || game[row][column] !== null) {\n      return;\n    }\n\n    this.reveal(game, solution, row, column);\n\n    this.updateGameStatus(game, solution, row, column);\n  }\n\n  handleRightClick(event, row, column) {\n    let game = this.state.game.slice();\n    event.preventDefault();\n    this.checkStart();\n\n    let value = game[row][column];\n    if (this.state.gameFinished\n      || (value !== null && value !== 'F')) {\n      return;\n    }\n\n    game[row][column] = value ? null : 'F';\n    const minesLeft = this.state.minesLeft + (game[row][column] ? -1 : 1);\n    Game.vibrate(200);\n\n    this.setState({ game, minesLeft });\n  }\n\n  reveal(game, solution, row, column) {\n    if (!this.inRange(row, column) || game[row][column] !== null) {\n      return;\n    }\n\n    game[row][column] = solution[row][column];\n\n    if (game[row][column] === 0) {\n      this.expand(game, solution, row, column);\n    }\n  }\n\n  expand(game, solution, row, column) {\n    this.reveal(game, solution, row - 1, column);\n    this.reveal(game, solution, row + 1, column);\n    this.reveal(game, solution, row, column - 1);\n    this.reveal(game, solution, row, column + 1);\n    this.reveal(game, solution, row - 1, column - 1);\n    this.reveal(game, solution, row - 1, column + 1);\n    this.reveal(game, solution, row + 1, column + 1);\n    this.reveal(game, solution, row + 1, column - 1);\n  }\n\n  updateGameStatus(game, solution, row, column) {\n    if (Game.isMine(game, row, column)) {\n      return this.setGameOver(game, solution, row, column);\n    }\n\n    const gameFinished = !Game.thereAreRemainingMoves(game, this.state.maximumMines);\n    const buttonStatus = gameFinished ? EMOJI_WIN : this.state.buttonStatus;\n    let minesLeft = this.state.minesLeft;\n\n    if (gameFinished) {\n      this.stopTimer();\n      game = Game.getSolution(game, solution, 'F');\n      minesLeft = 0;\n      Game.vibrate([300, 40, 300, 40, 300, 40, 300]);\n      this.updateBestTime(this.state.time || 1);\n    }\n\n    this.setState({ game, gameFinished, buttonStatus, minesLeft });\n  }\n\n  setGameOver(game, solution, row, column) {\n    this.stopTimer();\n\n    game = game.map(\n      (row, rowKey) => row.map(\n        (square, squareKey) => {\n          const isMine = Game.isMine(solution, rowKey, squareKey);\n          if (square === 'F') {\n            return isMine ? square : 'W';\n          }\n\n          return isMine ? 'M' : square;\n        }\n      )\n    );\n    Game.vibrate(800);\n    game[row][column] = 'C';\n\n    this.setState({\n      game,\n      gameFinished: true,\n      buttonStatus: EMOJI_GAME_OVER,\n    });\n  }\n\n  generateGame(height, width, currentRow, currentColumn, maximumMines) {\n    const game = Game.generateArray(height, width, 0);\n    let generatedMines = 0;\n    let row;\n    let column;\n\n    while (generatedMines < maximumMines) {\n      row = Game.randomInRange(0, height - 1);\n      column = Game.randomInRange(0, width - 1);\n\n      if (!Game.isMine(game, row, column) && !(currentRow === row && currentColumn === column)) {\n        game[row][column] = 'M';\n        this.incrementMinesNearby(game, row - 1, column);\n        this.incrementMinesNearby(game, row + 1, column);\n        this.incrementMinesNearby(game, row, column - 1);\n        this.incrementMinesNearby(game, row, column + 1);\n        this.incrementMinesNearby(game, row - 1, column - 1);\n        this.incrementMinesNearby(game, row - 1, column + 1);\n        this.incrementMinesNearby(game, row + 1, column + 1);\n        this.incrementMinesNearby(game, row + 1, column - 1);\n        generatedMines++;\n      }\n    }\n\n    return game;\n  }\n\n  incrementMinesNearby(game, row, column) {\n    if (this.inRange(row, column) && !Game.isMine(game, row, column)) {\n      game[row][column] = game[row][column] + 1;\n    }\n  }\n\n  inRange(row, column) {\n    return row >= 0 && row < this.state.height\n      && column >= 0 && column < this.state.width;\n  }\n\n  startTimer() {\n    this.setState({\n      gameStarted: true,\n      time: 1,\n      start: Date.now(),\n    });\n    if (this.timer) {\n      this.stopTimer();\n    }\n    this.timer = setInterval(() => this.setState({\n      time: Math.floor((Date.now() - this.state.start) / 1000) + 1,\n    }), 1);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n  }\n\n  updateBestTime(newTime) {\n    const bestTimes = Object.assign({}, this.state.bestTimes);\n    const bestTime = bestTimes[this.getBestTimeKey()] || null;\n    if (bestTime === null || newTime < bestTime) {\n      bestTimes[this.getBestTimeKey()] = newTime;\n      localStorage.setItem('minesweeper:bestTimes', JSON.stringify(bestTimes));\n      this.setState({ bestTimes });\n    }\n  }\n\n  getBestTimeText() {\n    const bestTime = this.state.bestTimes[this.getBestTimeKey()] || null;\n    return bestTime !== null ? 'Best time: ' + Game.leftPad(bestTime) : '';\n  }\n\n  getBestTimeKey() {\n    return `${this.state.height},${this.state.width},${this.state.maximumMines}`;\n  }\n\n  isGame(height, width, maximumMines) {\n    return this.state.height === height\n      && this.state.width === width\n      && this.state.maximumMines === maximumMines;\n  }\n\n  render() {\n    return (\n      <div className=\"Game\">\n        <div className=\"wrapper\">\n          <Status\n            buttonStatus={this.state.buttonStatus}\n            minesLeft={Game.leftPad(this.state.minesLeft)}\n            time={Game.leftPad(this.state.time)}\n            onClick={() => this.restart(this.state.height, this.state.width, this.state.maximumMines)}\n          />\n        </div>\n        <div className=\"difficulty\">\n          <DifficultyLevel\n            isSelected={this.isGame(9, 9, 10)}\n            onClick={() => this.restart(9, 9, 10)}\n            label=\"Beginner\"\n            emoji=\"🙈\"\n          />\n          <DifficultyLevel\n            isSelected={this.isGame(16, 16, 40)}\n            onClick={() => this.restart(16, 16, 40)}\n            label=\"Intermediate\"\n            emoji=\"🙍‍♂\"\n          />\n          <DifficultyLevel\n            isSelected={this.isGame(16, 30, 99)}\n            onClick={() => this.restart(16, 30, 99)}\n            label=\"Expert\"\n            emoji=\"👳‍♂\"\n          />\n        </div>\n        <Board\n          onClick={(row, column) => this.handleClick(row, column)}\n          onRightClick={(event, row, column) => this.handleRightClick(event, row, column)}\n          game={this.state.game}\n          gameFinished={this.state.gameFinished}\n          width={this.state.width}\n        />\n        <div className=\"bestScore\">{this.getBestTimeText()}</div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './Home';\nimport Game from './Game';\n\nclass App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/game\" component={Game} />\n      </Switch>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter } from 'react-router-dom';\nimport App from './components/App'\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>,\n    document.getElementById('root'));\n"],"sourceRoot":""}